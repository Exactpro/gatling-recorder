#*
 * Copyright 2011 eBusiness Information, Groupe Excilys (www.excilys.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#
	val PROTOCOL = "${protocol}"
	val HOST = "${host}"
#if (${port} != -1)
	val PORT = "${port}"
#end
	val urlBase = ${urlBase}
	
	val httpConf = httpConfig.baseURL(urlBase)#if(${proxy.getPort()} != 0).proxy("${proxy.getHost()}", ${proxy.getPort()})#if(${proxy.getSslPort()} != 0).httpsPort(${proxy.getSslPort()})#end#if($!{proxy.getUsername()}).credentials("${proxy.getUsername()}", "${proxy.getPassword()}")#end#end

#foreach(${url} in ${urls.entrySet()})
	val ${url.getKey()} = "${url.getValue()}"
#end
	
#foreach (${h} in ${headers.entrySet()})
	val ${h.getKey()} =#if(${h.getValue().containsKey("headers")}) ${h.getValue().remove("headers")} ++#end Map(
#foreach (${header} in ${h.value.entrySet()})
		"${header.getKey()}" -> "${header.getValue()}"#if(${foreach.hasNext}),
#else
	
		)
#end
#end
	
#end
	
	val scn = scenario("${name}")
#foreach(${event} in ${events})
#if(${event.class.simpleName} == "TagEvent")
		/* ${event.getTag()} */
#elseif(${event.class.simpleName} == "PauseEvent")
		.pause(${event.getMinDuration()}, ${event.getMaxDuration()}#if(${event.getType()} != "SECONDS"), ${event.getType()}#end)
#else
		.exec(
			http("request_${event.getId()}")
			.${event.getRequest().getMethod().toString().toLowerCase()}(#if(${event.isWithUrlBase()})"${URI.create(${event.getRequest().getUri()}).getPath()}"#else url_${event.getId()}#end)
	#foreach(${param} in ${event.getRequestParams().entrySet()})
#foreach(${val} in ${param.getValue()})
		.param("${param.getKey()}", "${val}")
#end
	#end
#if($!{event.getHeadersId()})
		.headers(${event.getHeadersId()})
#else
		.headers(headers_${event.getId()})
#end
#if(${event.isWithCheck()})
			.check(status.eq(${event.getResponse().getStatus().getCode()}))
#end
	#if(${event.isWithBody()})
		.withFile("request_${event.getId()}.txt")
	#end
		)
#end
#end
	
	val scnConf = scn.configure users 1 protocolConfig httpConf
	runSimulations(scnConf)
