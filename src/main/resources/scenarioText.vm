	val urlBase = "${protocol}://${host}#if(${port} != -1):${port}#end"

	val httpConf = httpConfig.baseURL(urlBase)#if(${proxy.getPort()} != 0).proxy("${proxy.getHost()}", ${proxy.getPort()})#if(${proxy.getSslPort()} != 0).httpsPort(${proxy.getSslPort()})#end#if($!{proxy.getUsername()}).credentials("${proxy.getUsername()}", "${proxy.getPassword()}")#end#end

#foreach(${url} in ${urls.entrySet()})
	val ${url.getKey()} = "${url.getValue()}"
#end

#foreach (${h} in ${headers.entrySet()})
#* Velocity can't unset a variable from the context, so we pre-defined the variable to false *#
#set($otherHeaders = false)
#set($otherHeaders = ${h.getValue().remove("headers")})
	val ${h.getKey()} =#if($otherHeaders) $otherHeaders ++#end Map(
#foreach (${header} in ${h.value.entrySet()})
		"${header.getKey()}" -> """${header.getValue()}"""#if(${foreach.hasNext}),
#else

	)
#end
#end
#* We set again the otherHeaders, if we have to dump scala version for the scenario *#
#set($otherHeaders = ${h.getValue().put("headers", $otherHeaders)})
#end

	val scn = scenario("${name}")
#foreach(${event} in ${events})
#if(${event.class.simpleName} == "TagEvent")
		/* ${event.getTag()} */
#elseif(${event.class.simpleName} == "PauseEvent")
		.pause(${event.getMinDuration()}, ${event.getMaxDuration()}#if(${event.getType()} != "SECONDS"), ${event.getType()}#end)
#else
		.exec(
			http("request_${event.getId()}")
			.${event.getRequest().getMethod().toString().toLowerCase()}(#if(${event.isWithUrlBase()})"${URI.create(${event.getRequest().getUri()}).getPath()}"#{else}url_${event.getId()}#end)
#foreach(${param} in ${event.getRequestParams().entrySet()})
#foreach(${val} in ${param.getValue()})
			.#if(${event.getRequest().getMethod().toString().toLowerCase()} == "get")queryP#{else}p#{end}aram("${param.getKey()}", "${val}")
#end
#end
#if($!{event.getHeadersId()})
			.headers(${event.getHeadersId()})
#else
			.headers(headers_${event.getId()})
#end
#if(${event.getBasicAuth()})
			.basicAuth("${event.getBasicAuth().getUsername()}", "${event.getBasicAuth().getPassword()}")
#end
#if(${event.isWithBody()})
			.fileBody("${date}_request_${event.getId()}.txt")
#end
#if(${event.isWithCheck()})
			.check(status.eq(${event.getResponse().getStatus().getCode()}))
#end
		)
#end
#end

	runSimulation(
		scn.configure users 1 protocolConfig httpConf
	)