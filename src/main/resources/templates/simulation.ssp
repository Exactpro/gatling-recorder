<%@ val protocolConfig: com.excilys.ebi.gatling.recorder.scenario.ProtocolConfigElement %>
<%@ val headers: Map[Int, List[(String, String)]] %>
<%@ val scenarioName: String %>
<%@ val simulationClassName: String %>
<%@ val packageName: Option[String] %>
<%@ val scenarioElements: Either[List[com.excilys.ebi.gatling.recorder.scenario.ScenarioElement], List[List[com.excilys.ebi.gatling.recorder.scenario.ScenarioElement]]] %>
<% if(packageName.isDefined) { %>package <%= packageName.get %> <% } %>

import com.excilys.ebi.gatling.core.Predef._
import com.excilys.ebi.gatling.http.Predef._
import com.excilys.ebi.gatling.jdbc.Predef._
import com.excilys.ebi.gatling.http.Headers.Names._
import akka.util.duration._

class <%= simulationClassName %> extends Simulation {

	def apply = {

		val httpConf = httpConfig
			<%= protocolConfig %>

<% for( header <- headers ) { %>			 
		val headers_<%= header._1 %> = Map(
<%= (for { headerElem <- header._2 } yield "\t\t\t\"" + headerElem._1 + "\" -> \"\"\"" + headerElem._2 + "\"\"\"").mkString(",\n") %>
		)

<% } %>

<% scenarioElements match {%>
<% case Left(elements) =>%>
		val scn = scenario("<%= scenarioName %>")
<% for (element <- elements) {%>
<%=element%>
<%}%>
<% case Right(chains) =>%>
<% for((chain, i) <- chains.zipWithIndex) { %>
		val chain_<%= i %> =
<% for ((element, j) <- chain.zipWithIndex) {%>
		<%if (j != 0){%>.<%}%><%=element%>
<%}%>
<%}%>

		val scn = scenario("<%= scenarioName %>")
			.exec(
<% for ((chain, i) <- chains.zipWithIndex) {%>
				chain_<%=i%><%if (i > 0) {%>,<%}%>
<%}%>
			)
<%}%>

		List(scn.configure.users(1).protocolConfig(httpConf))
	}
}